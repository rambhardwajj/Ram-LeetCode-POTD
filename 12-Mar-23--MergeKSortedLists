Merge K Sorted Lists

               // Devide And Conquer -> Most Optimised
class Solution {
    public ListNode mergeKLists(ListNode[] lists)
    {
        if( lists.length==0) return null; 
        return mergeKSortedList( lists, 0, lists.length-1);
    }
    public ListNode mergeKSortedList( ListNode[] lists, int start , int end)
    {
        if( start==end)
            return lists[start];
        
        int mid = start+ (end-start)/2;
        ListNode left  = mergeKSortedList(lists , start , mid) ;
        ListNode right = mergeKSortedList( lists, mid+1, end);
        return merge(left, right);
    }
    public ListNode merge( ListNode left , ListNode right)
    {
        ListNode head = new ListNode(-1);
        ListNode temp  = head;
        while( left != null && right!=null){
            if( left.val <= right.val){
                temp.next = left; temp= temp.next; left= left.next;
            }
            else {
                temp.next= right; temp=temp.next; right= right.next;
            }
        }
        while( left!=null ){
            temp.next= left ; temp= temp.next; left= left.next;
        }
        while( right!=null){
            temp.next= right; temp=temp.next; right= right.next;
        }
        return head.next;
    }
}

        // Approach 2 -> Easy Soltion but not most Optimised
class Solution {
    List<Integer> li = new ArrayList<>();
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0)
            return null;
            
        li = helper( lists);
        Collections.sort(li); 
        if( li.size()==0)  return null;

        ListNode head = new ListNode(li.get(0));
        ListNode temp= head;
        for( int i = 1 ; i< li.size(); i++)
        {
            ListNode curr = new ListNode(li.get(i));
            temp.next=curr;  temp=temp.next;
        } 
        return head;
    }
    public List<Integer> helper( ListNode [] lists)
    {
        for( int i =0 ; i< lists.length; i++)
        {
            ListNode curr = lists[i];
            while( curr!=null){
                li.add( curr.val);
                curr=curr.next;
            }
        }
        return li; 
    }
}